//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RezaRestaurant.SQL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DatabaseDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DatabaseDataSet : global::System.Data.DataSet {
        
        private DataTable_فاکتورDataTable tableDataTable_فاکتور;
        
        private DataTable_گزارش_فاکتورهای_صادر_شدهDataTable tableDataTable_گزارش_فاکتورهای_صادر_شده;
        
        private DataTable_گزارش_اقلام_مصرف_شدهDataTable tableDataTable_گزارش_اقلام_مصرف_شده;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DatabaseDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DatabaseDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable_فاکتور"] != null)) {
                    base.Tables.Add(new DataTable_فاکتورDataTable(ds.Tables["DataTable_فاکتور"]));
                }
                if ((ds.Tables["DataTable_گزارش_فاکتورهای_صادر_شده"] != null)) {
                    base.Tables.Add(new DataTable_گزارش_فاکتورهای_صادر_شدهDataTable(ds.Tables["DataTable_گزارش_فاکتورهای_صادر_شده"]));
                }
                if ((ds.Tables["DataTable_گزارش_اقلام_مصرف_شده"] != null)) {
                    base.Tables.Add(new DataTable_گزارش_اقلام_مصرف_شدهDataTable(ds.Tables["DataTable_گزارش_اقلام_مصرف_شده"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable_فاکتورDataTable DataTable_فاکتور {
            get {
                return this.tableDataTable_فاکتور;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable_گزارش_فاکتورهای_صادر_شدهDataTable DataTable_گزارش_فاکتورهای_صادر_شده {
            get {
                return this.tableDataTable_گزارش_فاکتورهای_صادر_شده;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable_گزارش_اقلام_مصرف_شدهDataTable DataTable_گزارش_اقلام_مصرف_شده {
            get {
                return this.tableDataTable_گزارش_اقلام_مصرف_شده;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DatabaseDataSet cln = ((DatabaseDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable_فاکتور"] != null)) {
                    base.Tables.Add(new DataTable_فاکتورDataTable(ds.Tables["DataTable_فاکتور"]));
                }
                if ((ds.Tables["DataTable_گزارش_فاکتورهای_صادر_شده"] != null)) {
                    base.Tables.Add(new DataTable_گزارش_فاکتورهای_صادر_شدهDataTable(ds.Tables["DataTable_گزارش_فاکتورهای_صادر_شده"]));
                }
                if ((ds.Tables["DataTable_گزارش_اقلام_مصرف_شده"] != null)) {
                    base.Tables.Add(new DataTable_گزارش_اقلام_مصرف_شدهDataTable(ds.Tables["DataTable_گزارش_اقلام_مصرف_شده"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable_فاکتور = ((DataTable_فاکتورDataTable)(base.Tables["DataTable_فاکتور"]));
            if ((initTable == true)) {
                if ((this.tableDataTable_فاکتور != null)) {
                    this.tableDataTable_فاکتور.InitVars();
                }
            }
            this.tableDataTable_گزارش_فاکتورهای_صادر_شده = ((DataTable_گزارش_فاکتورهای_صادر_شدهDataTable)(base.Tables["DataTable_گزارش_فاکتورهای_صادر_شده"]));
            if ((initTable == true)) {
                if ((this.tableDataTable_گزارش_فاکتورهای_صادر_شده != null)) {
                    this.tableDataTable_گزارش_فاکتورهای_صادر_شده.InitVars();
                }
            }
            this.tableDataTable_گزارش_اقلام_مصرف_شده = ((DataTable_گزارش_اقلام_مصرف_شدهDataTable)(base.Tables["DataTable_گزارش_اقلام_مصرف_شده"]));
            if ((initTable == true)) {
                if ((this.tableDataTable_گزارش_اقلام_مصرف_شده != null)) {
                    this.tableDataTable_گزارش_اقلام_مصرف_شده.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DatabaseDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatabaseDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable_فاکتور = new DataTable_فاکتورDataTable();
            base.Tables.Add(this.tableDataTable_فاکتور);
            this.tableDataTable_گزارش_فاکتورهای_صادر_شده = new DataTable_گزارش_فاکتورهای_صادر_شدهDataTable();
            base.Tables.Add(this.tableDataTable_گزارش_فاکتورهای_صادر_شده);
            this.tableDataTable_گزارش_اقلام_مصرف_شده = new DataTable_گزارش_اقلام_مصرف_شدهDataTable();
            base.Tables.Add(this.tableDataTable_گزارش_اقلام_مصرف_شده);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable_فاکتور() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable_گزارش_فاکتورهای_صادر_شده() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable_گزارش_اقلام_مصرف_شده() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DatabaseDataSet ds = new DatabaseDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable_فاکتورRowChangeEventHandler(object sender, DataTable_فاکتورRowChangeEvent e);
        
        public delegate void DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEventHandler(object sender, DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEvent e);
        
        public delegate void DataTable_گزارش_اقلام_مصرف_شدهRowChangeEventHandler(object sender, DataTable_گزارش_اقلام_مصرف_شدهRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable_فاکتورDataTable : global::System.Data.TypedTableBase<DataTable_فاکتورRow> {
            
            private global::System.Data.DataColumn columnشماره_ردیف;
            
            private global::System.Data.DataColumn columnنام_غذا;
            
            private global::System.Data.DataColumn columnتعداد;
            
            private global::System.Data.DataColumn columnقیمت_یک_واحد;
            
            private global::System.Data.DataColumn columnقیمت_کل;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_فاکتورDataTable() {
                this.TableName = "DataTable_فاکتور";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable_فاکتورDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable_فاکتورDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn شماره_ردیفColumn {
                get {
                    return this.columnشماره_ردیف;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn نام_غذاColumn {
                get {
                    return this.columnنام_غذا;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn تعدادColumn {
                get {
                    return this.columnتعداد;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn قیمت_یک_واحدColumn {
                get {
                    return this.columnقیمت_یک_واحد;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn قیمت_کلColumn {
                get {
                    return this.columnقیمت_کل;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_فاکتورRow this[int index] {
                get {
                    return ((DataTable_فاکتورRow)(this.Rows[index]));
                }
            }
            
            public event DataTable_فاکتورRowChangeEventHandler DataTable_فاکتورRowChanging;
            
            public event DataTable_فاکتورRowChangeEventHandler DataTable_فاکتورRowChanged;
            
            public event DataTable_فاکتورRowChangeEventHandler DataTable_فاکتورRowDeleting;
            
            public event DataTable_فاکتورRowChangeEventHandler DataTable_فاکتورRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable_فاکتورRow(DataTable_فاکتورRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_فاکتورRow AddDataTable_فاکتورRow(string شماره_ردیف, string نام_غذا, string تعداد, string قیمت_یک_واحد, string قیمت_کل) {
                DataTable_فاکتورRow rowDataTable_فاکتورRow = ((DataTable_فاکتورRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        شماره_ردیف,
                        نام_غذا,
                        تعداد,
                        قیمت_یک_واحد,
                        قیمت_کل};
                rowDataTable_فاکتورRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable_فاکتورRow);
                return rowDataTable_فاکتورRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable_فاکتورDataTable cln = ((DataTable_فاکتورDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable_فاکتورDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnشماره_ردیف = base.Columns["شماره ردیف"];
                this.columnنام_غذا = base.Columns["نام غذا"];
                this.columnتعداد = base.Columns["تعداد"];
                this.columnقیمت_یک_واحد = base.Columns["قیمت یک واحد"];
                this.columnقیمت_کل = base.Columns["قیمت کل"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnشماره_ردیف = new global::System.Data.DataColumn("شماره ردیف", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnشماره_ردیف);
                this.columnنام_غذا = new global::System.Data.DataColumn("نام غذا", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnنام_غذا);
                this.columnتعداد = new global::System.Data.DataColumn("تعداد", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnتعداد);
                this.columnقیمت_یک_واحد = new global::System.Data.DataColumn("قیمت یک واحد", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnقیمت_یک_واحد);
                this.columnقیمت_کل = new global::System.Data.DataColumn("قیمت کل", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnقیمت_کل);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_فاکتورRow NewDataTable_فاکتورRow() {
                return ((DataTable_فاکتورRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable_فاکتورRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable_فاکتورRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable_فاکتورRowChanged != null)) {
                    this.DataTable_فاکتورRowChanged(this, new DataTable_فاکتورRowChangeEvent(((DataTable_فاکتورRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable_فاکتورRowChanging != null)) {
                    this.DataTable_فاکتورRowChanging(this, new DataTable_فاکتورRowChangeEvent(((DataTable_فاکتورRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable_فاکتورRowDeleted != null)) {
                    this.DataTable_فاکتورRowDeleted(this, new DataTable_فاکتورRowChangeEvent(((DataTable_فاکتورRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable_فاکتورRowDeleting != null)) {
                    this.DataTable_فاکتورRowDeleting(this, new DataTable_فاکتورRowChangeEvent(((DataTable_فاکتورRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable_فاکتورRow(DataTable_فاکتورRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable_فاکتورDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable_گزارش_فاکتورهای_صادر_شدهDataTable : global::System.Data.TypedTableBase<DataTable_گزارش_فاکتورهای_صادر_شدهRow> {
            
            private global::System.Data.DataColumn columnشماره_ردیف;
            
            private global::System.Data.DataColumn columnنوع_فاکتور;
            
            private global::System.Data.DataColumn columnشماره_فاکتور;
            
            private global::System.Data.DataColumn columnشماره_میز;
            
            private global::System.Data.DataColumn columnمبلغ_فاکتور;
            
            private global::System.Data.DataColumn columnتاریخ_فاکتور;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_فاکتورهای_صادر_شدهDataTable() {
                this.TableName = "DataTable_گزارش_فاکتورهای_صادر_شده";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable_گزارش_فاکتورهای_صادر_شدهDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable_گزارش_فاکتورهای_صادر_شدهDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn شماره_ردیفColumn {
                get {
                    return this.columnشماره_ردیف;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn نوع_فاکتورColumn {
                get {
                    return this.columnنوع_فاکتور;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn شماره_فاکتورColumn {
                get {
                    return this.columnشماره_فاکتور;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn شماره_میزColumn {
                get {
                    return this.columnشماره_میز;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn مبلغ_فاکتورColumn {
                get {
                    return this.columnمبلغ_فاکتور;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn تاریخ_فاکتورColumn {
                get {
                    return this.columnتاریخ_فاکتور;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_فاکتورهای_صادر_شدهRow this[int index] {
                get {
                    return ((DataTable_گزارش_فاکتورهای_صادر_شدهRow)(this.Rows[index]));
                }
            }
            
            public event DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEventHandler DataTable_گزارش_فاکتورهای_صادر_شدهRowChanging;
            
            public event DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEventHandler DataTable_گزارش_فاکتورهای_صادر_شدهRowChanged;
            
            public event DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEventHandler DataTable_گزارش_فاکتورهای_صادر_شدهRowDeleting;
            
            public event DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEventHandler DataTable_گزارش_فاکتورهای_صادر_شدهRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable_گزارش_فاکتورهای_صادر_شدهRow(DataTable_گزارش_فاکتورهای_صادر_شدهRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_فاکتورهای_صادر_شدهRow AddDataTable_گزارش_فاکتورهای_صادر_شدهRow(string شماره_ردیف, string نوع_فاکتور, string شماره_فاکتور, string شماره_میز, string مبلغ_فاکتور, string تاریخ_فاکتور) {
                DataTable_گزارش_فاکتورهای_صادر_شدهRow rowDataTable_گزارش_فاکتورهای_صادر_شدهRow = ((DataTable_گزارش_فاکتورهای_صادر_شدهRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        شماره_ردیف,
                        نوع_فاکتور,
                        شماره_فاکتور,
                        شماره_میز,
                        مبلغ_فاکتور,
                        تاریخ_فاکتور};
                rowDataTable_گزارش_فاکتورهای_صادر_شدهRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable_گزارش_فاکتورهای_صادر_شدهRow);
                return rowDataTable_گزارش_فاکتورهای_صادر_شدهRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable_گزارش_فاکتورهای_صادر_شدهDataTable cln = ((DataTable_گزارش_فاکتورهای_صادر_شدهDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable_گزارش_فاکتورهای_صادر_شدهDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnشماره_ردیف = base.Columns["شماره ردیف"];
                this.columnنوع_فاکتور = base.Columns["نوع فاکتور"];
                this.columnشماره_فاکتور = base.Columns["شماره فاکتور"];
                this.columnشماره_میز = base.Columns["شماره میز"];
                this.columnمبلغ_فاکتور = base.Columns["مبلغ فاکتور"];
                this.columnتاریخ_فاکتور = base.Columns["تاریخ فاکتور"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnشماره_ردیف = new global::System.Data.DataColumn("شماره ردیف", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnشماره_ردیف);
                this.columnنوع_فاکتور = new global::System.Data.DataColumn("نوع فاکتور", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnنوع_فاکتور);
                this.columnشماره_فاکتور = new global::System.Data.DataColumn("شماره فاکتور", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnشماره_فاکتور);
                this.columnشماره_میز = new global::System.Data.DataColumn("شماره میز", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnشماره_میز);
                this.columnمبلغ_فاکتور = new global::System.Data.DataColumn("مبلغ فاکتور", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnمبلغ_فاکتور);
                this.columnتاریخ_فاکتور = new global::System.Data.DataColumn("تاریخ فاکتور", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnتاریخ_فاکتور);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_فاکتورهای_صادر_شدهRow NewDataTable_گزارش_فاکتورهای_صادر_شدهRow() {
                return ((DataTable_گزارش_فاکتورهای_صادر_شدهRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable_گزارش_فاکتورهای_صادر_شدهRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable_گزارش_فاکتورهای_صادر_شدهRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable_گزارش_فاکتورهای_صادر_شدهRowChanged != null)) {
                    this.DataTable_گزارش_فاکتورهای_صادر_شدهRowChanged(this, new DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEvent(((DataTable_گزارش_فاکتورهای_صادر_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable_گزارش_فاکتورهای_صادر_شدهRowChanging != null)) {
                    this.DataTable_گزارش_فاکتورهای_صادر_شدهRowChanging(this, new DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEvent(((DataTable_گزارش_فاکتورهای_صادر_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable_گزارش_فاکتورهای_صادر_شدهRowDeleted != null)) {
                    this.DataTable_گزارش_فاکتورهای_صادر_شدهRowDeleted(this, new DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEvent(((DataTable_گزارش_فاکتورهای_صادر_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable_گزارش_فاکتورهای_صادر_شدهRowDeleting != null)) {
                    this.DataTable_گزارش_فاکتورهای_صادر_شدهRowDeleting(this, new DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEvent(((DataTable_گزارش_فاکتورهای_صادر_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable_گزارش_فاکتورهای_صادر_شدهRow(DataTable_گزارش_فاکتورهای_صادر_شدهRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable_گزارش_فاکتورهای_صادر_شدهDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable_گزارش_اقلام_مصرف_شدهDataTable : global::System.Data.TypedTableBase<DataTable_گزارش_اقلام_مصرف_شدهRow> {
            
            private global::System.Data.DataColumn columnشماره_ردیف;
            
            private global::System.Data.DataColumn columnنام_غذا;
            
            private global::System.Data.DataColumn columnتعداد;
            
            private global::System.Data.DataColumn columnقیمت_یک_واحد;
            
            private global::System.Data.DataColumn columnقیمت_کل;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_اقلام_مصرف_شدهDataTable() {
                this.TableName = "DataTable_گزارش_اقلام_مصرف_شده";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable_گزارش_اقلام_مصرف_شدهDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable_گزارش_اقلام_مصرف_شدهDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn شماره_ردیفColumn {
                get {
                    return this.columnشماره_ردیف;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn نام_غذاColumn {
                get {
                    return this.columnنام_غذا;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn تعدادColumn {
                get {
                    return this.columnتعداد;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn قیمت_یک_واحدColumn {
                get {
                    return this.columnقیمت_یک_واحد;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn قیمت_کلColumn {
                get {
                    return this.columnقیمت_کل;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_اقلام_مصرف_شدهRow this[int index] {
                get {
                    return ((DataTable_گزارش_اقلام_مصرف_شدهRow)(this.Rows[index]));
                }
            }
            
            public event DataTable_گزارش_اقلام_مصرف_شدهRowChangeEventHandler DataTable_گزارش_اقلام_مصرف_شدهRowChanging;
            
            public event DataTable_گزارش_اقلام_مصرف_شدهRowChangeEventHandler DataTable_گزارش_اقلام_مصرف_شدهRowChanged;
            
            public event DataTable_گزارش_اقلام_مصرف_شدهRowChangeEventHandler DataTable_گزارش_اقلام_مصرف_شدهRowDeleting;
            
            public event DataTable_گزارش_اقلام_مصرف_شدهRowChangeEventHandler DataTable_گزارش_اقلام_مصرف_شدهRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable_گزارش_اقلام_مصرف_شدهRow(DataTable_گزارش_اقلام_مصرف_شدهRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_اقلام_مصرف_شدهRow AddDataTable_گزارش_اقلام_مصرف_شدهRow(string شماره_ردیف, string نام_غذا, string تعداد, string قیمت_یک_واحد, string قیمت_کل) {
                DataTable_گزارش_اقلام_مصرف_شدهRow rowDataTable_گزارش_اقلام_مصرف_شدهRow = ((DataTable_گزارش_اقلام_مصرف_شدهRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        شماره_ردیف,
                        نام_غذا,
                        تعداد,
                        قیمت_یک_واحد,
                        قیمت_کل};
                rowDataTable_گزارش_اقلام_مصرف_شدهRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable_گزارش_اقلام_مصرف_شدهRow);
                return rowDataTable_گزارش_اقلام_مصرف_شدهRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable_گزارش_اقلام_مصرف_شدهDataTable cln = ((DataTable_گزارش_اقلام_مصرف_شدهDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable_گزارش_اقلام_مصرف_شدهDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnشماره_ردیف = base.Columns["شماره ردیف"];
                this.columnنام_غذا = base.Columns["نام غذا"];
                this.columnتعداد = base.Columns["تعداد"];
                this.columnقیمت_یک_واحد = base.Columns["قیمت یک واحد"];
                this.columnقیمت_کل = base.Columns["قیمت کل"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnشماره_ردیف = new global::System.Data.DataColumn("شماره ردیف", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnشماره_ردیف);
                this.columnنام_غذا = new global::System.Data.DataColumn("نام غذا", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnنام_غذا);
                this.columnتعداد = new global::System.Data.DataColumn("تعداد", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnتعداد);
                this.columnقیمت_یک_واحد = new global::System.Data.DataColumn("قیمت یک واحد", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnقیمت_یک_واحد);
                this.columnقیمت_کل = new global::System.Data.DataColumn("قیمت کل", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnقیمت_کل);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_اقلام_مصرف_شدهRow NewDataTable_گزارش_اقلام_مصرف_شدهRow() {
                return ((DataTable_گزارش_اقلام_مصرف_شدهRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable_گزارش_اقلام_مصرف_شدهRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable_گزارش_اقلام_مصرف_شدهRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable_گزارش_اقلام_مصرف_شدهRowChanged != null)) {
                    this.DataTable_گزارش_اقلام_مصرف_شدهRowChanged(this, new DataTable_گزارش_اقلام_مصرف_شدهRowChangeEvent(((DataTable_گزارش_اقلام_مصرف_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable_گزارش_اقلام_مصرف_شدهRowChanging != null)) {
                    this.DataTable_گزارش_اقلام_مصرف_شدهRowChanging(this, new DataTable_گزارش_اقلام_مصرف_شدهRowChangeEvent(((DataTable_گزارش_اقلام_مصرف_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable_گزارش_اقلام_مصرف_شدهRowDeleted != null)) {
                    this.DataTable_گزارش_اقلام_مصرف_شدهRowDeleted(this, new DataTable_گزارش_اقلام_مصرف_شدهRowChangeEvent(((DataTable_گزارش_اقلام_مصرف_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable_گزارش_اقلام_مصرف_شدهRowDeleting != null)) {
                    this.DataTable_گزارش_اقلام_مصرف_شدهRowDeleting(this, new DataTable_گزارش_اقلام_مصرف_شدهRowChangeEvent(((DataTable_گزارش_اقلام_مصرف_شدهRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable_گزارش_اقلام_مصرف_شدهRow(DataTable_گزارش_اقلام_مصرف_شدهRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable_گزارش_اقلام_مصرف_شدهDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable_فاکتورRow : global::System.Data.DataRow {
            
            private DataTable_فاکتورDataTable tableDataTable_فاکتور;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable_فاکتورRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable_فاکتور = ((DataTable_فاکتورDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string شماره_ردیف {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_فاکتور.شماره_ردیفColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'شماره ردیف\' in table \'DataTable_فاکتور\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_فاکتور.شماره_ردیفColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string نام_غذا {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_فاکتور.نام_غذاColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'نام غذا\' in table \'DataTable_فاکتور\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_فاکتور.نام_غذاColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string تعداد {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_فاکتور.تعدادColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'تعداد\' in table \'DataTable_فاکتور\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_فاکتور.تعدادColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string قیمت_یک_واحد {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_فاکتور.قیمت_یک_واحدColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'قیمت یک واحد\' in table \'DataTable_فاکتور\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_فاکتور.قیمت_یک_واحدColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string قیمت_کل {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_فاکتور.قیمت_کلColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'قیمت کل\' in table \'DataTable_فاکتور\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_فاکتور.قیمت_کلColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isشماره_ردیفNull() {
                return this.IsNull(this.tableDataTable_فاکتور.شماره_ردیفColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setشماره_ردیفNull() {
                this[this.tableDataTable_فاکتور.شماره_ردیفColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isنام_غذاNull() {
                return this.IsNull(this.tableDataTable_فاکتور.نام_غذاColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setنام_غذاNull() {
                this[this.tableDataTable_فاکتور.نام_غذاColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsتعدادNull() {
                return this.IsNull(this.tableDataTable_فاکتور.تعدادColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetتعدادNull() {
                this[this.tableDataTable_فاکتور.تعدادColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isقیمت_یک_واحدNull() {
                return this.IsNull(this.tableDataTable_فاکتور.قیمت_یک_واحدColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setقیمت_یک_واحدNull() {
                this[this.tableDataTable_فاکتور.قیمت_یک_واحدColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isقیمت_کلNull() {
                return this.IsNull(this.tableDataTable_فاکتور.قیمت_کلColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setقیمت_کلNull() {
                this[this.tableDataTable_فاکتور.قیمت_کلColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable_گزارش_فاکتورهای_صادر_شدهRow : global::System.Data.DataRow {
            
            private DataTable_گزارش_فاکتورهای_صادر_شدهDataTable tableDataTable_گزارش_فاکتورهای_صادر_شده;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable_گزارش_فاکتورهای_صادر_شدهRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable_گزارش_فاکتورهای_صادر_شده = ((DataTable_گزارش_فاکتورهای_صادر_شدهDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string شماره_ردیف {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_ردیفColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'شماره ردیف\' in table \'DataTable_گزارش_فاکتورهای_صادر_شده\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_ردیفColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string نوع_فاکتور {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.نوع_فاکتورColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'نوع فاکتور\' in table \'DataTable_گزارش_فاکتورهای_صادر_شده\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.نوع_فاکتورColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string شماره_فاکتور {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_فاکتورColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'شماره فاکتور\' in table \'DataTable_گزارش_فاکتورهای_صادر_شده\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_فاکتورColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string شماره_میز {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_میزColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'شماره میز\' in table \'DataTable_گزارش_فاکتورهای_صادر_شده\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_میزColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string مبلغ_فاکتور {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.مبلغ_فاکتورColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'مبلغ فاکتور\' in table \'DataTable_گزارش_فاکتورهای_صادر_شده\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.مبلغ_فاکتورColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string تاریخ_فاکتور {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.تاریخ_فاکتورColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'تاریخ فاکتور\' in table \'DataTable_گزارش_فاکتورهای_صادر_شده\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.تاریخ_فاکتورColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isشماره_ردیفNull() {
                return this.IsNull(this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_ردیفColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setشماره_ردیفNull() {
                this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_ردیفColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isنوع_فاکتورNull() {
                return this.IsNull(this.tableDataTable_گزارش_فاکتورهای_صادر_شده.نوع_فاکتورColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setنوع_فاکتورNull() {
                this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.نوع_فاکتورColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isشماره_فاکتورNull() {
                return this.IsNull(this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_فاکتورColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setشماره_فاکتورNull() {
                this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_فاکتورColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isشماره_میزNull() {
                return this.IsNull(this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_میزColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setشماره_میزNull() {
                this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.شماره_میزColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isمبلغ_فاکتورNull() {
                return this.IsNull(this.tableDataTable_گزارش_فاکتورهای_صادر_شده.مبلغ_فاکتورColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setمبلغ_فاکتورNull() {
                this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.مبلغ_فاکتورColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isتاریخ_فاکتورNull() {
                return this.IsNull(this.tableDataTable_گزارش_فاکتورهای_صادر_شده.تاریخ_فاکتورColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setتاریخ_فاکتورNull() {
                this[this.tableDataTable_گزارش_فاکتورهای_صادر_شده.تاریخ_فاکتورColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable_گزارش_اقلام_مصرف_شدهRow : global::System.Data.DataRow {
            
            private DataTable_گزارش_اقلام_مصرف_شدهDataTable tableDataTable_گزارش_اقلام_مصرف_شده;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable_گزارش_اقلام_مصرف_شدهRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable_گزارش_اقلام_مصرف_شده = ((DataTable_گزارش_اقلام_مصرف_شدهDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string شماره_ردیف {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_اقلام_مصرف_شده.شماره_ردیفColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'شماره ردیف\' in table \'DataTable_گزارش_اقلام_مصرف_شده\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_اقلام_مصرف_شده.شماره_ردیفColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string نام_غذا {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_اقلام_مصرف_شده.نام_غذاColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'نام غذا\' in table \'DataTable_گزارش_اقلام_مصرف_شده\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_اقلام_مصرف_شده.نام_غذاColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string تعداد {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_اقلام_مصرف_شده.تعدادColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'تعداد\' in table \'DataTable_گزارش_اقلام_مصرف_شده\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_اقلام_مصرف_شده.تعدادColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string قیمت_یک_واحد {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_یک_واحدColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'قیمت یک واحد\' in table \'DataTable_گزارش_اقلام_مصرف_شده\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_یک_واحدColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string قیمت_کل {
                get {
                    try {
                        return ((string)(this[this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_کلColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'قیمت کل\' in table \'DataTable_گزارش_اقلام_مصرف_شده\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_کلColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isشماره_ردیفNull() {
                return this.IsNull(this.tableDataTable_گزارش_اقلام_مصرف_شده.شماره_ردیفColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setشماره_ردیفNull() {
                this[this.tableDataTable_گزارش_اقلام_مصرف_شده.شماره_ردیفColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isنام_غذاNull() {
                return this.IsNull(this.tableDataTable_گزارش_اقلام_مصرف_شده.نام_غذاColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setنام_غذاNull() {
                this[this.tableDataTable_گزارش_اقلام_مصرف_شده.نام_غذاColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsتعدادNull() {
                return this.IsNull(this.tableDataTable_گزارش_اقلام_مصرف_شده.تعدادColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetتعدادNull() {
                this[this.tableDataTable_گزارش_اقلام_مصرف_شده.تعدادColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isقیمت_یک_واحدNull() {
                return this.IsNull(this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_یک_واحدColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setقیمت_یک_واحدNull() {
                this[this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_یک_واحدColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isقیمت_کلNull() {
                return this.IsNull(this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_کلColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setقیمت_کلNull() {
                this[this.tableDataTable_گزارش_اقلام_مصرف_شده.قیمت_کلColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable_فاکتورRowChangeEvent : global::System.EventArgs {
            
            private DataTable_فاکتورRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_فاکتورRowChangeEvent(DataTable_فاکتورRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_فاکتورRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEvent : global::System.EventArgs {
            
            private DataTable_گزارش_فاکتورهای_صادر_شدهRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_فاکتورهای_صادر_شدهRowChangeEvent(DataTable_گزارش_فاکتورهای_صادر_شدهRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_فاکتورهای_صادر_شدهRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable_گزارش_اقلام_مصرف_شدهRowChangeEvent : global::System.EventArgs {
            
            private DataTable_گزارش_اقلام_مصرف_شدهRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_اقلام_مصرف_شدهRowChangeEvent(DataTable_گزارش_اقلام_مصرف_شدهRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable_گزارش_اقلام_مصرف_شدهRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591